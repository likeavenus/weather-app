{"version":3,"sources":["components/Main/Main.scss","App.scss","components/Header/Header.scss","Preloader/Preloader.scss","Preloader/img/preloader.svg","components/Header/Header.js","Preloader/Preloader.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","header","Component","Preloader","preloader","src","alt","Main","props","getCelciusFromKelvin","temperature","Math","round","getWeather","city","a","trim","url","setState","weather","inputCity","fetch","promise","ok","json","response","console","log","name","main","temp","handleChangeCity","e","target","value","handleOnKeydown","keyCode","state","undefined","this","main_container","main_title","main_weather","main__temp","onSubmit","preventDefault","main_form","action","main_select_text","onKeyDown","placeholder","main_input","onChange","type","id","main_btn","onClick","App","Boolean","window","location","hostname","match","initialState","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1e1e669.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main__main___1jQaZ\",\"main_container\":\"Main__main_container___yt5Eo\",\"main_title\":\"Main__main_title___1lKV4\",\"main__temp\":\"Main__main__temp___37ips\",\"main_btn\":\"Main__main_btn___e0UmK\",\"main_form\":\"Main__main_form___25GEM\",\"main_select_text\":\"Main__main_select_text___H-sD-\",\"main_input\":\"Main__main_input___1ovtp\",\"main_weather\":\"Main__main_weather___ZoDYW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App___wmyqV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header__header___3bMN6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader__preloader___GtPa4\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.da1db289.svg\";","import React, {Component} from 'react';\r\nimport styles from './Header.scss';\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className={styles.header}>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport styles from './Preloader.scss';\r\nimport preloader from './img/preloader.svg';\r\n\r\nexport default class Preloader extends Component {\r\n    render() {\r\n        return(\r\n            <img className={styles.preloader} src={preloader} alt=\"\"/>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport styles from './Main.scss';\r\nimport Preloader from \"../../Preloader/Preloader\";\r\nconst API_KEY = 'ec6ad128cb27d3422ba0afa3f9df1389';\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            city: '',\r\n            weather: '',\r\n            temperature: undefined,\r\n            inputCity: ''\r\n        }\r\n    }\r\n\r\n    getCelciusFromKelvin = (temperature) => {\r\n        const KELVIN_TO_CELCIUS = 273.15;\r\n        return Math.round(temperature - KELVIN_TO_CELCIUS);\r\n    };\r\n\r\n    getWeather = async (city) => {\r\n        if (city.trim() !== '') {\r\n            const url = `https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`;\r\n            this.setState({\r\n                city: '',\r\n                temperature: '',\r\n                weather: '',\r\n                inputCity: ''\r\n            });\r\n\r\n            const promise = await fetch(url);\r\n            if (promise.ok) {\r\n                const response = await promise.json();\r\n                console.log('[Data is ready]');\r\n                console.log(response);\r\n                this.setState({\r\n                    city: response.name,\r\n                    temperature: this.getCelciusFromKelvin(response.main.temp),\r\n                    weather: response\r\n                })\r\n            } else {\r\n                this.getWeather('Saint Petersburg, RU');\r\n            }\r\n        }\r\n\r\n\r\n    };\r\n\r\n    handleChangeCity = (e) => {\r\n        this.setState({\r\n            inputCity: e.target.value\r\n        })\r\n    };\r\n\r\n    handleOnKeydown = (e) => {\r\n        if (e.keyCode === 13) {\r\n            this.getWeather(this.state.inputCity);\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getWeather('Saint Petersburg, RU');\r\n    }\r\n\r\n    render() {\r\n        const {city, temperature, inputCity, weather} = this.state;\r\n        let content = <Preloader/>;\r\n        if (city === '') {\r\n            content = <Preloader/>;\r\n        } else {\r\n            content = <div className={styles.main}>\r\n                <div className={styles.main_container}>\r\n                    <h1 className={styles.main_title}>{city}</h1>\r\n                    <p className={styles.main_weather}>{weather.weather[0].main}</p>\r\n                    <p className={styles.main__temp}>{temperature} Â°C</p>\r\n\r\n                    <form onSubmit={(e) => {e.preventDefault()}} className={styles.main_form} action=\"\">\r\n                        <p className={styles.main_select_text}>Show another city:</p>\r\n                        <input onKeyDown={(e) => {this.handleOnKeydown(e)}} placeholder={'city'} className={styles.main_input} onChange={(e)=> {this.handleChangeCity(e)}} type=\"text\" id={'city'} name={'city'} value={inputCity}/>\r\n                        <button className={styles.main_btn} type={'button'} onClick={()=> {this.getWeather(inputCity)}}>Find</button>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>;\r\n        }\r\n        return(content)\r\n    }\r\n}\r\n","import React from 'react';\r\nimport styles from './App.scss';\r\nimport Header from \"./components/Header/Header\";\r\nimport Main from \"./components/Main/Main\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={styles.App}>\r\n      <Header/>\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createStore} from \"redux\";\r\nimport {Provider} from \"react-redux\";\r\nconst initialState = [];\r\nconst store = createStore(getCardsList, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nfunction getCardsList(state = initialState, action) {\r\n    return [...state];\r\n}\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}